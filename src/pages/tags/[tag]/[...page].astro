---
import BaseHead from '../../../components/BaseHead.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import BlogCardGrid from '../../../components/BlogCardGrid.astro';
import Pagination from '../../../components/Pagination.astro';
import Breadcrumb from '../../../components/Breadcrumb.astro';
import { SITE_TITLE, POSTS_PER_PAGE } from '../../../consts';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => {
    return import.meta.env.PROD ? data.draft !== true : true;
  });
  
  const allTags = [...new Set(posts.flatMap(post => post.data.tags || []))];
  
  // 2ページ目以降のみを生成（1ページ目は /tags/[tag]/index.astro が担当）
  const paths = [];
  
  for (const tag of allTags) {
    const tagPosts = posts
      .filter(post => post.data.tags?.includes(tag))
      .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
    
    const totalPages = Math.ceil(tagPosts.length / POSTS_PER_PAGE);
    
    for (let i = 2; i <= totalPages; i++) {
      const start = (i - 1) * POSTS_PER_PAGE;
      const end = start + POSTS_PER_PAGE;
      const pagePosts = tagPosts.slice(start, end);
      
      paths.push({
        params: { tag, page: i.toString() },
        props: {
          page: {
            data: pagePosts,
            start: start,
            end: Math.min(end - 1, tagPosts.length - 1),
            total: tagPosts.length,
            currentPage: i,
            lastPage: totalPages,
            url: {
              prev: i === 2 ? `/tags/${encodeURIComponent(tag)}/` : `/tags/${encodeURIComponent(tag)}/${i - 1}/`,
              next: i < totalPages ? `/tags/${encodeURIComponent(tag)}/${i + 1}/` : null
            }
          }
        }
      });
    }
  }
  
  return paths;
}

const { tag } = Astro.params;
const { page } = Astro.props;
const posts = page.data;

// CollectionPage構造化データ
const collectionPageSchema = {
	"@context": "https://schema.org",
	"@type": "CollectionPage",
	"name": `「${tag}」タグの記事一覧`,
	"description": `「${tag}」タグが付けられた記事の一覧ページです。`,
	"url": new URL(Astro.url.pathname, Astro.site).href,
	"inLanguage": "ja",
	"isPartOf": {
		"@type": "WebSite",
		"name": "ABTA",
		"url": Astro.site?.href
	},
	"numberOfItems": page.total
};

// パンくずリスト用データ
const breadcrumbItems = [
	{ name: 'ホーム', url: '/' },
	{ name: 'タグ', url: '/tags/' },
	{ name: tag }
];

const pageTitle = page.currentPage === 1 
	? `「${tag}」タグの記事 - ${SITE_TITLE}`
	: `「${tag}」タグの記事 - ${page.currentPage}ページ目 - ${SITE_TITLE}`;

const pageDescription = page.currentPage === 1
	? `「${tag}」タグが付けられた記事の一覧です。${page.total}件の記事があります。`
	: `「${tag}」タグが付けられた記事の${page.currentPage}ページ目です。${page.start + 1}件目から${page.end + 1}件目の記事を表示しています（全${page.total}件中）。`;
---

<!doctype html>
<html lang="ja">
	<head>
		<BaseHead title={pageTitle} description={pageDescription} />
		<script type="application/ld+json" set:html={JSON.stringify(collectionPageSchema)}></script>
		<style>
			body {
				background: var(--primary-background);
				min-height: 100vh;
			}
			
			main {
				width: 100%;
				padding: 2rem 0;
			}
			
			.container {
				max-width: 1200px;
				margin: 0 auto;
				padding: 0 1rem;
			}
			
			.page-header {
				text-align: center;
				margin-bottom: 3rem;
			}
			
			.tag-badge {
				display: inline-block;
				background: var(--primary-dark);
				color: var(--primary-background);
				padding: 0.5rem 1.5rem;
				border-radius: 20px;
				font-size: 1rem;
				margin-bottom: 1rem;
				font-weight: 500;
			}
			
			h1 {
				color: var(--primary-foreground);
				margin: 0.5rem 0;
				font-size: 2rem;
			}
			
			.page-info {
				color: var(--primary-foreground);
				font-size: 1rem;
				margin-top: 0.5rem;
				opacity: 0.8;
			}
			
			.back-link {
				color: var(--primary);
				text-decoration: none;
				margin-bottom: 2rem;
				display: inline-flex;
				align-items: center;
				gap: 0.5rem;
				font-size: 0.9rem;
				transition: all 0.2s ease;
			}
			
			.back-link:hover {
				color: var(--primary-dark);
				transform: translateX(-4px);
			}
			
			@media (max-width: 768px) {
				h1 {
					font-size: 1.5rem;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<div class="container">
				<Breadcrumb items={breadcrumbItems} />
				<a href="/tags/" class="back-link">← すべてのタグ</a>
				<div class="page-header">
					<div class="tag-badge">{tag}</div>
					<h1>「{tag}」タグの記事</h1>
					{page.currentPage === 1 ? (
						<p class="page-info">{page.total} 件の記事</p>
					) : (
						<p class="page-info">
							{page.start + 1}件目〜{page.end + 1}件目を表示（全{page.total}件中）
						</p>
					)}
				</div>
				<section>
					<BlogCardGrid posts={posts} />
				</section>
				<Pagination 
					currentPage={page.currentPage}
					totalPages={page.lastPage}
					baseUrl={`/tags/${tag}`}
					prevUrl={page.url.prev}
					nextUrl={page.url.next}
				/>
			</div>
		</main>
		<Footer />
	</body>
</html>