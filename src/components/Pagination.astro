---
export interface Props {
	currentPage: number;
	totalPages: number;
	baseUrl: string;
	prevUrl?: string | null;
	nextUrl?: string | null;
}

const { currentPage, totalPages, baseUrl, prevUrl, nextUrl } = Astro.props;

// 高度なページネーション表示ロジック
const getPaginationItems = () => {
	const items = [];
	const threshold = 5; // 5ページ以下なら全て表示
	const edgeCount = 5; // 端から何ページまで表示するか
	const centerCount = 3; // 中央で何ページ表示するか
	
	if (totalPages <= threshold) {
		// 総ページ数が少ない場合は全て表示
		for (let i = 1; i <= totalPages; i++) {
			items.push({ type: 'page', value: i });
		}
	} else {
		// 1ページ目は必ず表示
		items.push({ type: 'page', value: 1 });
		
		if (currentPage <= edgeCount) {
			// 最初の方のページ: 1, 2, 3, 4, 5, …, 99
			for (let i = 2; i <= edgeCount; i++) {
				items.push({ type: 'page', value: i });
			}
			items.push({ type: 'ellipsis', direction: 'next', targetPage: Math.min(currentPage + 5, totalPages - 1) });
		} else if (currentPage >= totalPages - edgeCount + 1) {
			// 最後の方のページ: 1, …, 95, 96, 97, 98, 99
			items.push({ type: 'ellipsis', direction: 'prev', targetPage: Math.max(currentPage - 5, 2) });
			for (let i = totalPages - edgeCount + 1; i <= totalPages - 1; i++) {
				items.push({ type: 'page', value: i });
			}
		} else {
			// 中間のページ: 1, …, 50, 51, 52, …, 99
			items.push({ type: 'ellipsis', direction: 'prev', targetPage: Math.max(currentPage - 5, 2) });
			
			const centerStart = currentPage - Math.floor(centerCount / 2);
			const centerEnd = centerStart + centerCount - 1;
			
			for (let i = centerStart; i <= centerEnd; i++) {
				items.push({ type: 'page', value: i });
			}
			
			items.push({ type: 'ellipsis', direction: 'next', targetPage: Math.min(currentPage + 5, totalPages - 1) });
		}
		
		// 最後のページは必ず表示（最初のページと重複しない場合）
		if (totalPages > 1) {
			items.push({ type: 'page', value: totalPages });
		}
	}
	
	return items;
};

const paginationItems = getPaginationItems();
---

<nav class="pagination" role="navigation" aria-label="ページネーション">
	<ul class="pagination-list">
		<!-- 前のページ -->
		{prevUrl ? (
			<li>
				<a href={prevUrl} class="pagination-link pagination-prev" aria-label="前のページ">
					<span>‹</span>
					<span class="pagination-text">前へ</span>
				</a>
			</li>
		) : (
			<li>
				<span class="pagination-link pagination-prev disabled" aria-label="前のページ（無効）">
					<span>‹</span>
					<span class="pagination-text">前へ</span>
				</span>
			</li>
		)}

		<!-- ページ番号と省略記号 -->
		{paginationItems.map((item) => (
			<li>
				{item.type === 'page' ? (
					item.value === currentPage ? (
						<span class="pagination-link current" aria-current="page" aria-label={`現在のページ、${item.value}ページ目`}>
							{item.value}
						</span>
					) : (
						<a href={item.value === 1 ? `${baseUrl}/` : `${baseUrl}/${item.value}/`} class="pagination-link" aria-label={`${item.value}ページ目`}>
							{item.value}
						</a>
					)
				) : (
					<a 
						href={item.targetPage === 1 ? `${baseUrl}/` : `${baseUrl}/${item.targetPage}/`} 
						class="pagination-link pagination-ellipsis" 
						aria-label={item.direction === 'prev' ? '前のページ群へ' : '次のページ群へ'}
					>
						…
					</a>
				)}
			</li>
		))}

		<!-- 次のページ -->
		{nextUrl ? (
			<li>
				<a href={nextUrl} class="pagination-link pagination-next" aria-label="次のページ">
					<span class="pagination-text">次へ</span>
					<span>›</span>
				</a>
			</li>
		) : (
			<li>
				<span class="pagination-link pagination-next disabled" aria-label="次のページ（無効）">
					<span class="pagination-text">次へ</span>
					<span>›</span>
				</span>
			</li>
		)}
	</ul>
</nav>

<style>
	.pagination {
		margin: 3rem 0;
		display: flex;
		justify-content: center;
	}

	.pagination-list {
		display: flex;
		list-style: none;
		margin: 0;
		padding: 0;
		gap: 0.5rem;
		align-items: center;
	}

	.pagination-link {
		display: flex;
		align-items: center;
		justify-content: center;
		min-width: 2.5rem;
		height: 2.5rem;
		padding: 0 0.75rem;
		border: 1px solid var(--primary-dark);
		border-radius: 8px;
		background: var(--primary-background);
		color: var(--primary-foreground);
		text-decoration: none;
		font-weight: 500;
		font-size: 0.9rem;
		transition: all 0.2s ease;
		gap: 0.25rem;
	}

	.pagination-link:hover:not(.disabled):not(.current) {
		background: var(--primary-dark);
		color: var(--primary-background);
		transform: translateY(-2px);
		box-shadow: var(--box-shadow);
	}

	.pagination-link.current {
		background: var(--primary);
		color: var(--primary-background);
		border-color: var(--primary);
		font-weight: 600;
	}

	.pagination-link.disabled {
		opacity: 0.5;
		cursor: not-allowed;
		color: var(--primary-foreground);
	}

	.pagination-ellipsis {
		font-weight: 600;
		user-select: none;
		font-size: 1.2rem;
		color: var(--primary);
	}

	.pagination-ellipsis:hover {
		background: var(--primary);
		color: var(--primary-background);
		transform: translateY(-2px);
		box-shadow: var(--box-shadow);
	}

	.pagination-prev,
	.pagination-next {
		font-weight: 600;
	}

	.pagination-text {
		font-size: 0.85rem;
	}

	@media (max-width: 768px) {
		.pagination {
			margin: 2rem 0;
		}

		.pagination-list {
			gap: 0.25rem;
		}

		.pagination-link {
			min-width: 2.25rem;
			height: 2.25rem;
			padding: 0 0.5rem;
			font-size: 0.85rem;
		}

		.pagination-text {
			display: none;
		}

		.pagination-prev span:first-child,
		.pagination-next span:last-child {
			font-size: 1.1rem;
		}
	}

	@media (max-width: 480px) {
		.pagination-link {
			min-width: 2rem;
			height: 2rem;
			padding: 0 0.375rem;
			font-size: 0.8rem;
		}
	}
</style>