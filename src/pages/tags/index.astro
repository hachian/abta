---
import ContentLayout from '../../components/ContentLayout.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import { createCollectionPageSchema } from '../../utils/schema.ts';
import { formatPostCount } from '../../utils/formatting.ts';

const posts = await getCollection('blog');
const allTags = [...new Set(posts.flatMap(post => post.data.tags || []))].sort();

// Count posts for each tag
const tagCounts = allTags.reduce((acc, tag) => {
  acc[tag] = posts.filter(post => post.data.tags?.includes(tag)).length;
  return acc;
}, {} as Record<string, number>);

// CollectionPage構造化データ
const collectionPageSchema = createCollectionPageSchema(
	"タグ一覧",
	"ABTAのブログ記事をタグ別に整理したページです。興味のあるトピックから記事を探すことができます。",
	new URL(Astro.url.pathname, Astro.site).href,
	Astro.site?.href || '',
	"ABTA",
	allTags.length
);

// パンくずリスト用データ
const breadcrumbItems = [
	{ name: 'ホーム', url: '/' },
	{ name: 'タグ' }
];

const pageTitle = `タグ一覧 - ${SITE_TITLE}`;
const pageDescription = 'ABTAのブログ記事をタグ別に整理したページです。興味のあるトピックから記事を探すことができます。';
---

<ContentLayout
	title={pageTitle}
	description={pageDescription}
	breadcrumbItems={breadcrumbItems}
	schema={collectionPageSchema}
>
	<div class="page-header">
		<h1>タグ一覧</h1>
		<p class="page-description">タグから記事を探す</p>
	</div>
	<div class="tags-grid">
		{allTags.map(tag => (
			<a href={`/tags/${tag}/`} class="tag-card">
				<div class="tag-name">{tag}</div>
				<div class="tag-count">
					{formatPostCount(tagCounts[tag])}
				</div>
			</a>
		))}
	</div>
</ContentLayout>