---
/**
 * BlogPostLayout.astro - ブログ記事専用レイアウト
 * - 既存のBlogPost.astroを共通コンポーネント化
 */
import type { CollectionEntry } from 'astro:content';
import type { MarkdownHeading } from 'astro';
import BaseHead from './BaseHead.astro';
import Header from './Header.astro';
import Footer from './Footer.astro';
import FormattedDate from './FormattedDate.astro';
import TableOfContents from './TableOfContents.astro';
import TagCloud from './TagCloud.astro';
import Breadcrumb from './Breadcrumb.astro';
import Lightbox from './Lightbox.astro';
import { Image } from 'astro:assets';
import { FEATURES, SITE_AUTHOR } from '../consts';
import { createBlogPostSchema } from '../utils/schema.ts';

type Props = CollectionEntry<'blog'>['data'] & {
	headings: MarkdownHeading[];
};

const { title, description, pubDate, updatedDate, heroImage, tags, headings, author } = Astro.props;

// パンくずリスト用データ準備
const breadcrumbItems = [
	{ name: 'ホーム', url: '/' },
	{ name: 'ブログ', url: '/blog/' },
	{ name: title }
];

// BlogPostスキーマを共通関数で生成
const blogPostingSchema = createBlogPostSchema(
	title,
	description,
	new URL(Astro.url.pathname, Astro.site).href,
	pubDate,
	updatedDate || pubDate,
	author || SITE_AUTHOR,
	SITE_AUTHOR,
	tags,
	typeof heroImage === 'string' ? heroImage : heroImage?.src
);
---

<html lang="ja">
	<head>
		<BaseHead 
			title={title} 
			description={description}
			type="article"
			publishedTime={pubDate}
			modifiedTime={updatedDate}
			author={author}
		/>
		<script type="application/ld+json" set:html={JSON.stringify(blogPostingSchema)}></script>
		<style>
			main {
				width: 100%;
				max-width: 100%;
				margin: 0;
				padding: 2rem 0;
			}
			.hero-image {
				max-width: 1200px;
				margin: 0 auto 2rem auto;
				padding: 0 1rem;
			}
			.hero-image-wrapper {
				width: 100%;
				max-width: 960px;
				margin: 0 auto;
				aspect-ratio: 2 / 1;
				overflow: hidden;
				border-radius: 12px;
			}
			.hero-image img {
				display: block;
				width: 100%;
				height: 100%;
				margin: 0;
				object-fit: cover;
				object-position: center;
			}
			.prose {
				background: var(--primary-background);
				box-shadow: var(--box-shadow);
				border-radius: 12px;
				padding: 2rem;
				color: var(--primary-foreground);
				margin-bottom: 2rem;
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: var(--primary-foreground);
				display: flex;
				align-items: center;
				gap: 1rem;
				flex-wrap: wrap;
			}
			.date-item {
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}
			.date-icon {
				width: 1em;
				height: 1em;
				flex-shrink: 0;
			}
			.last-updated-on {
				text-decoration: underline;
				text-decoration-color: var(--primary);
				text-underline-offset: 0.2em;
			}
			.tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
				margin-top: 1rem;
			}
			.tag {
				background: var(--primary-dark);
				color: var(--primary-background);
				padding: 0.25rem 0.75rem;
				border-radius: 20px;
				font-size: 0.75rem;
				text-decoration: none;
				transition: all 0.2s ease;
				font-weight: 500;
			}
			.tag:hover {
				background: var(--primary);
				transform: translateY(-2px);
				box-shadow: var(--box-shadow);
			}
			.content-wrapper {
				display: grid;
				grid-template-columns: 2fr 7fr 3fr;
				gap: 1rem;
				align-items: flex-start;
				width: 100%;
				max-width: 1400px;
				margin: 0 auto;
			}
			/* サイドバーなし（タグ・アーカイブ両方無効） */
			.content-wrapper.no-sidebar {
				grid-template-columns: 9fr 3fr;
			}
			.content-wrapper.no-sidebar .main-article {
				grid-column: 1;
			}
			.content-wrapper.no-sidebar .toc-sidebar {
				grid-column: 2;
			}
			
			/* 目次なし */
			.content-wrapper.no-toc {
				grid-template-columns: 2fr 7fr;
			}
			.content-wrapper.no-toc .main-article {
				grid-column: 2;
			}
			
			/* サイドバーなし＋目次なし */
			.content-wrapper.no-sidebar.no-toc {
				grid-template-columns: 1fr;
			}
			.content-wrapper.no-sidebar.no-toc .main-article {
				grid-column: 1;
			}
			.tag-cloud-sidebar {
				grid-column: 1;
			}
			.main-article {
				grid-column: 2;
				min-width: 0;
			}
			.toc-sidebar {
				grid-column: 3;
				position: sticky;
				top: 2rem;
				align-self: flex-start;
			}
			.tag-cloud-bottom {
				display: none;
			}
			@media (max-width: 1279px) {
				.prose {
					padding: 1.5rem;
				}
				.content-wrapper {
					grid-template-columns: 9fr 3fr;
				}
				.content-wrapper.no-toc {
					grid-template-columns: 1fr;
				}
				.content-wrapper.no-toc .main-article {
					grid-column: 1;
				}
				.tag-cloud-sidebar {
					display: none;
				}
				.main-article {
					grid-column: 1;
				}
				.toc-sidebar {
					grid-column: 2;
					position: sticky;
					top: 2rem;
					align-self: flex-start;
				}
				.tag-cloud-bottom {
					display: block;
					margin-top: 2rem;
					grid-column: 1;
					max-width: 720px;
					margin-left: auto;
					margin-right: auto;
				}
			}
			@media (max-width: 767px) {
				main {
					padding: 1rem 0;
				}
				.prose {
					padding: 1rem;
					margin-bottom: 1rem;
				}
				.hero-image {
					margin-bottom: 1rem;
				}
				.hero-image-wrapper {
					max-width: 100%;
				}
				.content-wrapper {
					display: block;
					gap: 0;
				}
				.tag-cloud-sidebar {
					display: none;
				}
				.main-article {
					width: 100%;
				}
				.toc-sidebar {
					position: fixed;
					bottom: 0;
					right: 0;
					display: block;
				}
				.tag-cloud-bottom {
					display: block;
					margin-top: 2rem;
					max-width: 100%;
				}
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<div class="hero-image">
				{heroImage && (
					<div class="hero-image-wrapper">
						<Image width={960} height={480} src={heroImage} alt={`${title}の記事のヒーロー画像`} />
					</div>
				)}
			</div>
			<div class="container">
				<Breadcrumb items={breadcrumbItems} />
				<div class={`content-wrapper ${(!FEATURES.TAGS_ENABLED || !tags) && !FEATURES.ARCHIVE_ENABLED ? 'no-sidebar' : ''} ${!FEATURES.TOC_ENABLED ? 'no-toc' : ''}`}>
					{(FEATURES.TAGS_ENABLED || FEATURES.ARCHIVE_ENABLED) && (
						<aside class="tag-cloud-sidebar">
							<TagCloud />
						</aside>
					)}
					<article class="main-article">
						<div class="prose">
							<div class="title">
								<div class="date">
									<div class="date-item">
										<svg class="date-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
											<path d="M8 2v4"></path>
											<path d="M16 2v4"></path>
											<rect width="18" height="18" x="3" y="4" rx="2"></rect>
											<path d="M3 10h18"></path>
										</svg>
										<FormattedDate date={pubDate} />
									</div>
									{
										updatedDate && (
											<div class="date-item last-updated-on">
												<svg class="date-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
													<path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path>
													<path d="M21 3v5h-5"></path>
													<path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path>
													<path d="M3 21v-5h5"></path>
												</svg>
												<FormattedDate date={updatedDate} />
											</div>
										)
									}
								</div>
								<h1>{title}</h1>
								{FEATURES.TAGS_ENABLED && tags && tags.length > 0 && (
									<div class="tags">
										{tags.map(tag => (
											<a href={`/tags/${tag}/`} class="tag">
												{tag}
											</a>
										))}
									</div>
								)}
								<hr />
							</div>
							<slot />
						</div>
					</article>
					{FEATURES.TOC_ENABLED && (
						<aside class="toc-sidebar">
							<TableOfContents headings={headings} />
						</aside>
					)}
				</div>
				{(FEATURES.TAGS_ENABLED || FEATURES.ARCHIVE_ENABLED) && (
					<div class="tag-cloud-bottom">
						<TagCloud />
					</div>
				)}
			</div>
		</main>
		<Footer />
		<Lightbox />
	</body>
</html>