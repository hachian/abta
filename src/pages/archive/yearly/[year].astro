---
import BaseHead from '../../../components/BaseHead.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../../components/FormattedDate.astro';
import { Image } from 'astro:assets';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  
  // Extract all unique years
  const years = [...new Set(posts.map(post => {
    const date = new Date(post.data.pubDate);
    return date.getFullYear().toString();
  }))];
  
  return years.map(year => ({
    params: { year },
    props: { 
      posts: posts.filter(post => {
        const date = new Date(post.data.pubDate);
        return date.getFullYear().toString() === year;
      }).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
    }
  }));
}

const { year } = Astro.params;
const { posts } = Astro.props;
---

<!doctype html>
<html lang="ja">
	<head>
		<BaseHead title={`${year}年の記事 - ${SITE_TITLE}`} description={`${year}年の記事一覧`} />
		<style>
			body {
				background: var(--primary-background);
				min-height: 100vh;
			}
			
			main {
				width: 100%;
				padding: 2rem 0;
			}
			
			.container {
				max-width: 1200px;
				margin: 0 auto;
				padding: 0 1rem;
			}
			
			.page-header {
				text-align: center;
				margin-bottom: 3rem;
			}
			
			
			h1 {
				color: var(--primary-foreground);
				margin: 0.5rem 0;
				font-size: 2rem;
			}
			
			.post-count {
				color: var(--primary-foreground);
				font-size: 1rem;
				margin-top: 0.5rem;
			}
			
			ul {
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
				gap: 2rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
				justify-content: start;
			}
			
			.card {
				background: var(--primary-background);
				border-radius: 16px;
				box-shadow: var(--box-shadow);
				transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
				overflow: hidden;
				position: relative;
			}
			
			@media (min-width: 768px) and (max-width: 1279px) {
				.card {
					max-width: 500px;
				}
			}
			
			@media (min-width: 1280px) {
				.card {
					max-width: 400px;
				}
			}
			
			.card:hover {
				transform: translateY(-8px);
				box-shadow: var(--box-shadow);
			}
			
			.card-link {
				display: block;
				text-decoration: none;
				color: inherit;
			}
			
			.card-image {
				position: relative;
				overflow: hidden;
				height: 200px;
			}
			
			.card-image img {
				width: 100%;
				height: 100%;
				object-fit: cover;
				transition: transform 0.3s ease;
			}
			
			.card:hover .card-image img {
				transform: scale(1.05);
			}
			
			.card-content {
				padding: 1.5rem;
			}
			
			.title {
				margin: 0 0 0.75rem 0;
				color: var(--primary-foreground);
				line-height: 1.4;
				font-size: 1.25rem;
				font-weight: 600;
			}
			
			.date {
				margin: 0 0 1rem 0;
				color: var(--primary-foreground);
				font-size: 0.875rem;
				display: flex;
				align-items: center;
				gap: 1rem;
				flex-wrap: wrap;
			}
			
			.date-item {
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}
			
			.date-icon {
				width: 1em;
				height: 1em;
				flex-shrink: 0;
			}
			
			.tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
				margin-top: 1rem;
			}
			
			.tag {
				background: var(--primary-dark);
				color: var(--primary-background);
				padding: 0.25rem 0.75rem;
				border-radius: 20px;
				font-size: 0.75rem;
				text-decoration: none;
				transition: all 0.2s ease;
				font-weight: 500;
			}
			
			.tag:hover {
				background: var(--primary);
				transform: translateY(-2px);
				box-shadow: var(--box-shadow);
			}
			
			.back-link {
				color: var(--primary);
				text-decoration: none;
				margin-bottom: 2rem;
				display: inline-flex;
				align-items: center;
				gap: 0.5rem;
				font-size: 0.9rem;
				transition: all 0.2s ease;
			}
			
			.back-link:hover {
				color: var(--primary-dark);
				transform: translateX(-4px);
			}
			
			@media (max-width: 768px) {
				ul {
					grid-template-columns: 1fr;
					gap: 1.5rem;
				}
				
				.card-content {
					padding: 1rem;
				}
				
				h1 {
					font-size: 1.5rem;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<div class="container">
				<a href="/archive/yearly/" class="back-link">← 年別一覧</a>
				<div class="page-header">
					<h1>{year}年の記事</h1>
					<p class="post-count">{posts.length}件の記事</p>
				</div>
				<section>
					<ul>
					{
						posts.map((post) => (
							<li class="card">
								<a href={`/blog/${post.id}/`} class="card-link">
									{post.data.heroImage && (
										<div class="card-image">
											<Image width={720} height={360} src={post.data.heroImage} alt="" />
										</div>
									)}
									<div class="card-content">
										<h4 class="title">{post.data.title}</h4>
										<div class="date">
											<div class="date-item">
												<svg class="date-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
													<path d="M8 2v4"></path>
													<path d="M16 2v4"></path>
													<rect width="18" height="18" x="3" y="4" rx="2"></rect>
													<path d="M3 10h18"></path>
												</svg>
												<FormattedDate date={post.data.pubDate} />
											</div>
											{post.data.updatedDate && (
												<div class="date-item">
													<svg class="date-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
														<path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path>
														<path d="M21 3v5h-5"></path>
														<path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path>
														<path d="M3 21v-5h5"></path>
													</svg>
													<FormattedDate date={post.data.updatedDate} />
												</div>
											)}
										</div>
										{post.data.tags && post.data.tags.length > 0 && (
											<div class="tags">
												{post.data.tags.map(tag => (
													<a href={`/tags/${tag}/`} class="tag" onclick="(e) => e.stopPropagation()">
														{tag}
													</a>
												))}
											</div>
										)}
									</div>
								</a>
							</li>
						))
					}
					</ul>
				</section>
			</div>
		</main>
		<Footer />
	</body>
</html>